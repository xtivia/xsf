apply plugin: 'war'

group = 'com.xtivia.tools'
version = '1.1.0'

description = "XSF Services Application"

sourceCompatibility = 1.7
targetCompatibility = 1.7

buildscript {

    repositories {
        // for resolving Reflections dependencies (special task at end)
        mavenCentral()
    }

    dependencies {
        // add Reflections dependency to build classpath
        classpath "org.reflections:reflections:0.9.10"
		classpath "org.jdom:jdom:1.1"
		classpath "dom4j:dom4j:1.6.1"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'com.xtivia.tools',             name: 'xsf',                   version: xsf_version
    compile group: 'com.fasterxml.jackson.core',   name: 'jackson-annotations',   version: jackson_version
    compile group: 'com.fasterxml.jackson.core',   name: 'jackson-core',          version: jackson_version
    compile group: 'com.fasterxml.jackson.core',   name: 'jackson-databind',      version: jackson_version
	
    testCompile group: 'junit',                    name: 'junit',                 version: junit_version
    testCompile group: 'org.slf4j',                name: 'slf4j-simple',          version: '1.6.2'
    testCompile group: 'org.mockito',              name: 'mockito-all',           version: '1.9.5'
	
    providedCompile group: 'com.liferay.portal',   name: 'portal-service',        version: liferay_version
    providedCompile group: 'javax.portlet',        name: 'portlet-api',           version: '2.0'
    providedCompile group: 'javax.servlet',        name: 'javax.servlet-api',     version: '3.0.1'
    providedCompile group: 'aopalliance',          name: 'aopalliance',           version: '1.0'
    providedCompile (group: 'org.springframework', name: 'spring-core',           version: spring_version) {
        exclude (module: 'commons-logging')
    }
    providedCompile (group: 'org.springframework', name: 'spring-context',        version: spring_version) {
        exclude (module: 'commons-logging')
    }
    providedCompile group: 'org.springframework',  name: 'spring-beans',          version: spring_version
    providedCompile group: 'org.springframework',  name: 'spring-web',            version: spring_version
    providedCompile group: 'org.springframework',  name: 'spring-webmvc-portlet', version: spring_version
    providedCompile group: 'org.springframework',  name: 'spring-aop',            version: spring_version
    providedCompile group: 'org.springframework',  name: 'spring-expression',     version: spring_version
    providedCompile group: 'org.springframework',  name: 'spring-webmvc',         version: spring_version
    providedCompile group: 'cglib',                name: 'cglib',                 version: cglib_version
    providedCompile group: 'asm',                  name: 'asm',                   version: asm_version
    providedCompile group: 'asm',                  name: 'asm-commons',           version: asm_version
    providedCompile group: 'asm',                  name: 'asm-util',              version: asm_version
    providedCompile group: 'asm',                  name: 'asm-tree',              version: asm_version
    providedCompile group: 'asm',                  name: 'asm-analysis',          version: asm_version
    providedCompile group: 'asm',                  name: 'asm-xml',               version: asm_version
    providedCompile group: 'commons-lang',         name: 'commons-lang',          version: '2.6'
    providedCompile group: 'commons-io',           name: 'commons-io',            version: '2.1'
    providedCompile group: 'commons-logging',      name: 'commons-logging',       version: '1.1.1'
    providedCompile group: 'org.slf4j',            name: 'slf4j-api',             version: '1.7.7'
    providedCompile group: 'org.jdom',             name: 'jdom',                  version: jdom_version
}

/*
The use of the build logic below allows XSF to discover and auto-register (with Spring)
your REST services at runtime. It generates a simple XML file used by XSF and places it
in the META-INF folder of your WAR file classpath. We HIGHLY recommended its use, but if
you need to remove it you will then need to perform required Spring configuration manually.
*/
war.doFirst {
    File outputDirectoryFile = new File("${project.sourceSets.main.output.classesDir}/");
    def url = outputDirectoryFile.toURI().toURL();
	org.reflections.util.ConfigurationBuilder config = new org.reflections.util.ConfigurationBuilder();
    config.setUrls(url);
    new org.reflections.Reflections(config)
                        .save("${project.sourceSets.main.output.classesDir}/META-INF/xsf-reflections.xml")
}

/*
This task will install the as-built WAR into a local Liferay deploy directly
but only if the property 'liferay_home' has been defined.
*/
build.doLast {
  if (project.hasProperty('liferay_home')) {
    ant.copy(todir: "${project.liferay_home}/deploy", flatten:true) {
        fileset(dir: "build") {
            include(name: "**/*.war")
        }
    }
  }
}

task wrapper(type:Wrapper){
    gradleVersion = '2.9'
}